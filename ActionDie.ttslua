DICE_TYPE_D10_TENS = "d10Tens"
DICE_TYPE_D10 = "d10"
DICE_TYPE_D100 = "d100"

#include Util
#include GlobalVars
#include ObjUtil



--SET "DIE_NAME" to enable recording of start and ending time of rolls.
--useful for using a couple of d10's to simulate a d100 for example

--SET "ACTION_TABLE" to override
DEFAULT_ACTION_FUNCTION = function (obj,value,color, colorText)
  print("ho",obj)
  local dr = getDiceRolledAtSameTime(obj)
  print("hi, ",dr[1].call('getDieType'),obj)
  local hist = getDiceHistogramWD100(dr)
  print("honk")

  local diceNamesText=""
  local totalValue = 0
  for k,v in spairs(hist,sortDiceNames) do
    diceNamesText = diceNamesText..(v[1])..k..","
    totalValue = totalValue + v[2]
  end

  diceNamesText=diceNamesText:sub(1, -2)

  broadcastToAll(colorText.." "..diceNamesText.." rolled for: "..totalValue,color)
end

--sorts lexographicly, except that if one str in shorter than the other
--orders that first
function sortDiceNames(t,l,r)
  local lenl = string.len(l)
  local lenr = string.len(r)

  if(lenl ~= lenr) then return lenl < lenr end
  return l < r
end

function getDieType(obj)
  if(obj.getVar('DIE_TYPE') ~= nil) then
    return obj.getVar('DIE_TYPE')
  end

  return "d"..obj.getNumDieSides(obj)
end

function getDiceRolledAtSameTime(obj)
  print("hyyy",obj)
  local er = getGlobalValue(rollEndTimeName(obj))
  local sr = getGlobalValue(rollStartTimeName(obj))
  print("xxx")

  local mySt = sr[obj]
  local myEt = er[obj]

  local diceRolledAtSameTime = {obj}

  for die,st in pairs(sr) do
    if(die ~= obj) then
      local et = er[die]

      if(et > mySt and et < myEt) then
        print("including ",die.getDieType())
        table.insert(diceRolledAtSameTime,die)
      end
    end
  end

  print("xxzzzzx")
  return diceRolledAtSameTime
end

--returns a table of die type to an array of number of dice and total value
--if the same number of dice of die type DICE_TYPE_D10_TENS and dice of die type DICE_TYPE_D10
--are rolled, will replace with D100's calculated properly
function getDiceHistogramWD100(rolledDice)
  print("zonk",rolledDice)
  local res = {}

  setDefault(res,{0,0})

  for die in pairs(rolledDice) do
    print("dice ",die)
    local type = die.call('getDieType')

    local val = res{type}

    val[1] = val[1] + 1
    val[2] = val[2] + die.getValue()
  end

  --if the same number of D10 TENs as D10 ones have been rolled, we
  --consider it a D100
  if(res[DICE_TYPE_D10TENS][1] ~= 0
     and res[DICE_TYPE_D10TENS][1] == res[DICE_TYPE_D10][1]) then

    --create a d100 for each pair
    res[DICE_TYPE_D100][1] = res[DICE_TYPE_D10_TENS][1]
    res[DICE_TYPE_D100][2] = res[DICE_TYPE_D10_TENS][2]*10
        + res[DICE_TYPE_D10][2]

    -- remove the individual dice
    res[DICE_TYPE_D10_TENS] = nil
    res[DICE_TYPE_D10] = nil
  end

  return res
end



function onObjectRandomize(object,colorText)
  if object == self then
    afterDrop()
  end
end

function isFastEnough(vel)
  local lenSqr = vel.x * vel.x + vel.y * vel.y + vel.z * vel.z
  --print("lenSqr "..lenSqr)
  return lenSqr > 300
end

function onDropped()
  if(isFastEnough(self.getVelocity())) then
    afterDrop()
  end
end

function checkResting(target)
    return target.resting
end

-- --the last time a die roll was started with the given DIE_NAME and color text
-- function getDieRollStartTime(self,die_name)
--   getGlobalValue(getDieGlobalVar(self,"ROLL_START_TIME",die_name))
-- end
--
-- --the last time a die roll was ended with the given DIE_NAME and color text
-- function getDieRollEndTime(self,die_name)
--   getGlobalValue(getDieGlobalVar(self,"ROLL_END_TIME",die_name))
-- end
--
-- function getDieGlobalVar(obj,name,die_name)
--   return getColorTextFromColor(self.getColorTint()).."_"..name.."_"..die_name
-- end

function rollStartTimeName(obj)
  return "DIE_ROLL_START_"..getColorTextFromColor(obj.getColorTint());
end

function rollEndTimeName(obj)
  return "DIE_ROLL_END_"..getColorTextFromColor(obj.getColorTint());
end

function setRollStartTime(obj,time)
  updateGlobalValue(rollStartTimeName(obj),
    function(t)
      t[obj] = time
      return t
    end,{})
end

function setRollEndTime(obj,time)
  updateGlobalValue(rollEndTimeName(obj),
    function(t)
      t[obj] = time
      return t
    end,{})
end

--return true if die1 is still rolling
function isDieStillRolling(die1)
  return die1.getVar('afterDropLock')
end

function isLastDieToRoll(obj)
  local er = getGlobalValue(rollEndTimeName(obj))
  local sr = getGlobalValue(rollStartTimeName(obj))

  local mySt = sr[obj]
  local myEt = er[obj]

  for die in pairs(sr) do
    if(die ~= obj) then
      local st = sr[die]
      local et = er[die]

      if(isDieStillRolling(die,obj)) then
        return false -- this will exit the function
      end
    end
  end

  return true
end

--used to make sure we don't get two roll actions occuring simulataneously
afterDropLock = false

function rollEnd()
  local color = self.getColorTint()
  local value = self.getValue()
  local colorText = getColorTextFromColor(color)

  setRollEndTime(self,os.clock())

  if(isLastDieToRoll(self)) then
    if(ACTION_FUNCTION ~= nil) then
      ACTION_FUNCTION(self,value,color,colorText)
    else
      DEFAULT_ACTION_FUNCTION(self,value,color,colorText)
    end
  end

  afterDropLock = false
end

function afterDrop()
  if(afterDropLock == true) then
    return
  end

  afterDropLock = true

  setRollStartTime(self,os.clock())

  local watchF = function() return self.resting end
  local endF = function() rollEnd() end

  Wait.condition(endF, watchF)
end
